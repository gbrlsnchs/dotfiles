require-module "number-toggle"
set-option global number_toggle_params -hlcursor

add-highlighter global/ wrap
add-highlighter global/ show-whitespaces -tab "»"

set-option global indentwidth 0
set-option global tabstop 4
set-option global grepcmd "rg --vimgrep --smart-case"

declare-option str raw_modeline
set-option global raw_modeline "%opt{modelinefmt}"

# Use EditorConfig.
hook global BufCreate .* %{
	editorconfig-load
	autoconfigtab
}

# LSP setup.
evaluate-commands %sh{
	# Use local config if it exists.
	if [ -f .kaklsp ]; then
		config="/tmp/kak-lsp/configs/${kak_session}.toml"

		mkdir --parents "$(dirname "${config}")"
		envsubst < .kaklsp | sed --expression 's/§/$/g' > "${config}"

		lsp_config_opt="--config ${config}"
	else
		lsp_config_opt="--config ${XDG_CONFIG_HOME}/kak-lsp/base.toml"
	fi

	kak-lsp ${lsp_config_opt} ${KAK_LSP_OPTS} --kakoune -s ${kak_session}
}

define-command -hidden -params 1 lsp-init %{
	hook global WinSetOption %sh{ printf "filetype=%s" $1 } %{
		try %{
			set-option window lsp_auto_highlight_references true
			set-option window lsp_hover_anchor true
			evaluate-commands %sh{
				[ -e .kaklspconfig ] && printf "%s\n" "
					set-option window lsp_config %{
						$(envsubst < .kaklspconfig)
					}
				"
			}

			lsp-enable-window
			lsp-auto-signature-help-enable
			#lsp-inlay-hints-enable window

			hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
			hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
			hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
			hook -once -always window WinSetOption %sh{ printf "filetype=%s" $kak_opt_filetype } %{
				remove-hooks window semantic-tokens
			}

			map window user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
			map window insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
			map window object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
			map window object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
			map window object e '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
			map window object k '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
			map window object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
			map window object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'
		}
	}
}

lsp-init "(c|cpp|go|haskell|java|javascript|json|python|ruby|rust|terraform|typescript|xml|zig)"

declare-option str foot_server_path %sh{ printf "%s" "$XDG_RUNTIME_DIR/foot-kakoune-$kak_session.sock" }
set-option global foot_normal_flags %sh{ printf "%s" "--server=$kak_opt_foot_server_path" }
set-option global foot_panel_flags '--app-id=panel' %sh{ printf "%s" "--server=$kak_opt_foot_server_path" }
set-option global foot_popup_flags '--app-id=popup' %sh{ printf "%s" "--server=$kak_opt_foot_server_path" }

define-command start-foot-server -docstring "Start foot server for this session" %{
	nop %sh{
		foot --server="$kak_opt_foot_server_path" > /dev/null 2>&1 < /dev/null &
		process=$!
		printf "%s\n" "
		hook -once -always global KakEnd .* %{ nop %sh{ rm -rf $kak_opt_foot_server_path; kill $process } }
		" | kak -p $kak_session
	}
}

hook global KakBegin .* %{
	start-foot-server

	nop %sh{ mkdir --parents /tmp/kak/cmd }

	nop %sh{
		cat << 'EOF' > /tmp/kak/cmd/open
#!/bin/sh

session="$1"
client="$2"
bufname="$3"
search_type="${4:-file}"
eval_cmd="${5:-edit}"

env FZF_DEFAULT_COMMAND="fd --color=always --type "$search_type" --hidden --no-ignore-vcs --follow . '$(dirname "$bufname")'" fzf \
	| xargs -I {} echo "evaluate-commands -client $client %{ $eval_cmd '{}' }" \
	| kak -p "$session"
EOF
		chmod u+x /tmp/kak/cmd/open
	}

	nop %sh{
		cat << 'EOF' > /tmp/kak/cmd/changed
#!/bin/sh

session="$1"
client="$2"
bufname="$3"

env FZF_DEFAULT_COMMAND="git ls-files --modified --others --exclude-standard '$(dirname "$bufname" || .)'" fzf \
	| xargs -I {} echo "evaluate-commands -client $client %{ edit '{}' }" \
	| kak -p "$session"
EOF
		chmod u+x /tmp/kak/cmd/changed
	}

	nop %sh{
		db_home="$XDG_STATE_HOME/kak/db"

		mkdir --parents "$db_home"
		sqlite3 "$db_home/data.db" << EOF
CREATE TABLE IF NOT EXISTS favorites (
	directory TEXT NOT NULL,
	buffer    TEXT NOT NULL,
	PRIMARY KEY (directory, buffer)
);
EOF

		cat << 'EOF' > /tmp/kak/cmd/favs
#!/bin/sh

session="$1"
client="$2"

sqlite3 --noheader \
	"$XDG_STATE_HOME/kak/db/data.db" \
	"SELECT buffer FROM favorites WHERE directory = '$PWD'" 2>/dev/null \
	| fzf \
	| xargs -I {} echo "eval -client $client edit '{}'" \
	| kak -p "$session"
EOF

		chmod u+x /tmp/kak/cmd/favs
	}
}

# Git
hook global WinCreate .* %{ git show-diff }
hook global BufWritePost .* %{ git update-diff }

hook global ModeChange pop:insert:.* %{
	try %{ execute-keys -draft x 1s^(\h+)$<ret> d }
}

define-command set-favorite -docstring "Set buffer as favorite for the current project" %{
	nop %sh{
		if [ ! -f "$kak_bufname" ]; then
			exit 1
		fi

		db_home="$XDG_STATE_HOME/kak/db"

		sqlite3 "$db_home/data.db" << EOF
INSERT INTO favorites (directory, buffer) VALUES ('$PWD', '$kak_bufname')
	ON CONFLICT DO NOTHING;
EOF
 	}
}

define-command unset-favorite -docstring "Remove buffer from project's favorites" %{
	nop %sh{
		db_home="$XDG_STATE_HOME/kak/db"

		sqlite3 "$db_home/data.db" << EOF
DELETE FROM favorites WHERE directory = '$PWD' AND buffer = '$kak_bufname';
EOF
 	}
}

set-option global disabled_hooks .*-(insert|indent)
hook global InsertChar \n %{
	try %{ exec -itersel -draft ';K<a-&>' }
}

hook global WinSetOption filetype=(haskell|yaml) %{
	set-option buffer indentwidth 2
	set-option buffer softtabstop 2
	expandtab
}

hook global WinSetOption filetype=(java|python|zig) %{
	set-option buffer indentwidth 4
	set-option buffer softtabstop 4
	expandtab
}

hook global BufCreate .*\.gcfg %{ set-option buffer filetype ini }
hook global BufCreate .*/Containerfile %{ set-option buffer filetype dockerfile }
hook global BufCreate .*\.kakrc %{ set-option buffer filetype kak }
hook global BufCreate .*\.kakenv %{ set-option buffer filetype yaml }
hook global BufCreate .*\.kaklsp(config)? %{ set-option buffer filetype toml }
hook global BufCreate .*/dracut/.*\.conf %{ set-option buffer filetype sh }
hook global WinSetOption filetype=git-commit %{
	hook buffer BufWritePost %sh{ printf ".*$kak_bufname" } %{ delete-buffer }
}
hook global WinSetOption filetype=justfile %{
	require-module sh
}

add-highlighter global/trailing-whitespace regex "\h+$" 0:Whitespace
hook global WinSetOption filetype=(diff|git-commit) %{
	add-highlighter buffer/diff-allow-one-trailing-space regex "^ " 0:Default
}

define-command hook-eslint -hidden -docstring "Hook ESLint as lintcmd" %{
	hook global WinSetOption filetype=(javascript|typescript) %{
		set-option buffer lintcmd "kakeslint %val{buffile}"
	}
}

define-command hook-prettier -hidden -params 1 -docstring "Hook Prettier as formatcmd" %{
	evaluate-commands %sh{
		printf "%s\n" "
			hook global WinSetOption filetype=$1 %{
				set-option buffer formatcmd \"./node_modules/prettier/bin-prettier.js --stdin-filepath=%val{buffile}\"
			}
		"
	}
}

# Custom commands.
try %{
	define-command find-file -docstring "Find a file using fuzzy search" %{
		terminal-popup /tmp/kak/cmd/open %val{session} %val{client}
	}
	alias global fd find-file

	define-command find-directory -docstring "Find a directory using fuzzy search and write it to prompt" %{
		terminal-popup /tmp/kak/cmd/open %val{session} %val{client} "" directory "execute-keys :edit<space>"
	}
	alias global fdd find-directory

	define-command find-file-relative -docstring "Find a file in current buffer's directory using fuzzy search" %{
		terminal-popup /tmp/kak/cmd/open %val{session} %val{client} %val{bufname}
	}
	alias global fdr find-file-relative

	define-command find-directory-relative -docstring "Find a directory using fuzzy search and write it to prompt" %{
		terminal-popup /tmp/kak/cmd/open %val{session} %val{client} %val{bufname} directory "execute-keys :edit<space>"
	}
	alias global fdp find-directory-relative

	define-command find-modified -docstring "Find a modified file using fuzzy search" %{
		terminal-popup /tmp/kak/cmd/changed %val{session} %val{client}
	}
	alias global fm find-modified

	define-command find-modified-relative -docstring "Find a modified file in current buffer's directory using fuzzy search" %{
		terminal-popup /tmp/kak/cmd/changed %val{session} %val{client} %val{bufname}
	}
	alias global fmr find-modified-relative

	define-command find-favorites -docstring "Find favorited files" %{
		terminal-popup /tmp/kak/cmd/favs %val{session} %val{client}
	}
	define-command split %{
		new eval buffer %val{bufname} ";" select %val{selection_desc}
	}
	alias global fdf find-favorites
}

map -docstring "Insert current buffer's directory" global prompt <a-/> '%sh{dirname "$kak_bufname"}<a-!>/'

set-option global modelinefmt "%opt{raw_modeline} LSP[%opt{lsp_modeline}]"

declare-user-mode file
map global file f "<esc>: format-buffer<ret>" -docstring "format buffer using formatcmd"
map global file l "<esc>: lint-buffer<ret>"   -docstring "lint buffer using lintcmd"
map global user f %{:enter-user-mode file<ret>} -docstring "File mode"

declare-user-mode clipboard
map global clipboard c "<a-|>wl-copy -n<ret>" -docstring "copy selection to clipboard"
map global clipboard p "!wl-paste -n<ret>" -docstring "paste clipboard text"
map global user c %{:enter-user-mode clipboard<ret>} -docstring "Clipboard mode"

colorscheme custom
