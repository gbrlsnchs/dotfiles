local lush = require("lush")

local palette = require("local.colorscheme.palette")

local commons = {
	diff = {
		add = palette.green,
		change = palette.cyan,
		delete = palette.red,
	},
	diagnostic = {
		error = palette.bright_red,
		warn = palette.bright_yellow,
		info = palette.bright_blue,
		hint = palette.bright_purple,
	},
}

return lush(function()
	return {
		Normal({ bg = palette.bg, fg = palette.fg }),
		ErrorMsg({ bg = palette.red, fg = palette.bg }),
		Float({ Normal }),
		Visual({ bg = palette.bright_black }),
		VisualNOS({ Visual }),
		FloatBorder({ Normal }),
		Pmenu({ Float }),
		VertSplit({ bg = palette.black }),
		CursorLine({ bg = palette.black }),
		SignColumn({ CursorLine }),
		ColorColumn({ CursorLine }),
		LineNr({ fg = palette.gray }),
		CursorLineNr({ fg = palette.bright_gray }),
		Search({ bg = palette.bright_yellow, fg = palette.black }),
		IncSearch({ Search }),
		MatchParen({ gui = "underline" }),
		NonText({ CursorLine, fg = palette.gray }),
		DiffText({ Normal }),
		DiffAdd({ SignColumn, fg = commons.diff.add }),
		DiffChange({ SignColumn, fg = commons.diff.change }),
		DiffDelete({ SignColumn, fg = commons.diff.delete }),
		QuickFixLine({ Search, gui = "bold" }),
		Question({ Search }),
		MoreMsg({ Normal }),
		Directory({ fg = palette.cyan, gui = "bold" }),

		StatusLine({ CursorLine, fg = palette.bg }),
		StatusLineNC({ StatusLine, fg = palette.gray }),
		StatusLineNCFileInfo({ StatusLineNC, gui = "bold" }),
		StatusLineNCFileInfoModified({
			CursorLine,
			fg = palette.gray,
			gui = "bold, underline",
		}),
		StatusLineActive({ bg = palette.bright_blue, fg = palette.bg }),
		StatusLineActiveFileInfo({ StatusLineActive, gui = "bold" }),
		StatusLineActiveFileInfoModified({ StatusLineActiveFileInfo, gui = "bold, underline" }),
		StatusLineBranch({ Visual, gui = "bold" }),
		StatusLineDiffAdd({ StatusLine, bg = commons.diff.add }),
		StatusLineDiffChange({ StatusLine, bg = commons.diff.change }),
		StatusLineDiffDelete({ StatusLine, bg = commons.diff.delete }),

		DiagnosticWarn({ fg = commons.diagnostic.warn, guisp = commons.diagnostic.warn }),
		DiagnosticSignWarn({ SignColumn, fg = commons.diagnostic.warn }),
		DiagnosticUnderlineWarn({ gui = "undercurl", guisp = commons.diagnostic.warn }),
		Error({ fg = commons.diagnostic.error, guisp = commons.diagnostic.error }),
		DiagnosticError({ Error, guisp = palette.bright_red }),
		DiagnosticSignError({ SignColumn, fg = palette.bright_red }),
		DiagnosticUnderlineError({ gui = "undercurl", guisp = commons.diagnostic.error }),
		DiagnosticInfo({ fg = palette.bright_blue, guisp = palette.bright_blue }),
		DiagnosticSignInfo({ SignColumn, fg = palette.bright_blue }),
		DiagnosticUnderlineInfo({ gui = "undercurl", guisp = commons.diagnostic.info }),
		DiagnosticHint({ fg = palette.bright_purple, guisp = palette.bright_purple }),
		DiagnosticSignHint({ SignColumn, fg = palette.bright_purple }),
		DiagnosticUnderlineHint({ gui = "undercurl", guisp = commons.diagnostic.hint }),

		Special({ fg = palette.cyan }),
		SpecialChar({ Special }),
		SpecialKey({ Special }),
		Type({ fg = palette.bright_cyan, gui = "bold" }),
		Constant({ fg = palette.bright_blue }),
		Function({ fg = palette.bright_purple, gui = "bold" }),
		Boolean({ fg = palette.bright_red }),
		Number({ fg = palette.bright_blue }),
		String({ fg = palette.bright_green }),
		Comment({ fg = palette.gray, gui = "italic" }),
		Operator({ Special }),
		Keyword({ fg = palette.yellow, gui = "bold" }),
		Conditional({ Keyword }),
		Repeat({ Keyword }),
		Include({ Keyword }),

		-- Tree-sitter.
		TSNone({}),
		TSPunctSpecial({ Special }),
		TSVariable({ fg = palette.fg }),
		TSVariableBuiltin({ fg = palette.bright_blue, gui = "italic" }),
		TSAttribute({ TSVariable }),
		TSProperty({ TSVariable }),
		TSField({ TSVariable }),
		TSParameter({ TSVariable, gui = "italic" }),
		TSParameterReference({ TSParameter }),
		TSType({ Type }),
		TSTypeBuiltin({ TSType, gui = "bold, italic" }),
		TSConstant({ Constant }),
		TSConstBuiltin({ TSConstant, gui = "bold, italic" }),
		TSFunction({ Function }),
		TSFuncBuiltin({ TSFunction }),
		TSMethod({ TSFunction }),
		TSBoolean({ Boolean }),
		TSString({ String }),
		TSNumber({ Number }),
		TSLiteral({ TSString }),
		TSComment({ Comment }),
		TSOperator({ Operator }),
		TSKeyword({ Keyword }),
		TSKeywordFunction({ TSKeyword, gui = "bold, italic" }),
		TSKeywordOperator({ TSVariable }),
		TSConditional({ Conditional }),
		TSRepeat({ Repeat }),
		TSNamespace({ TSOperator }),
		TSInclude({ Include }),
	}
end)
