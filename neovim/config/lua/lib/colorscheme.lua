local lush = require("lush")

local palette = require("lib.colorscheme.palette")

local commons = {
	diff = {
		add = palette.green,
		change = palette.cyan,
		delete = palette.red,
	},
	diagnostic = {
		error = palette.bright_red,
		warn = palette.bright_yellow,
		info = palette.bright_blue,
		hint = palette.bright_purple,
	},
}

return lush(function()
	return {
		Normal({ bg = palette.bg, fg = palette.fg }),
		Cursor({ gui = "inverse" }),
		ErrorMsg({ bg = palette.red, fg = palette.bg }),
		Float({ Normal }),
		NormalFloat({ bg = palette.bg, fg = palette.fg }),
		Visual({ bg = palette.blue, fg = palette.bg }),
		VisualNOS({ Visual }),
		FloatBorder({ Normal }),
		SignColumn({ Normal }),
		CursorLine({ Normal, fg = "NONE" }),
		CursorLineNr({ CursorLine, fg = palette.bright_gray }),
		LineNr({ fg = palette.gray }),
		ColorColumn({ bg = palette.black }),
		VertSplit({ CursorLine }),
		Search({ bg = palette.bright_yellow, fg = palette.bg }),
		IncSearch({ Search }),
		MatchParen({ gui = "underline" }),
		NonText({ fg = palette.bright_black }),
		Whitespace({ NonText }),
		QuickFixLine({ Search, gui = "bold" }),
		Question({ Search }),
		MoreMsg({ Normal }),
		Directory({ fg = palette.bright_yellow, gui = "bold" }),
		Pmenu({ bg = palette.gray, fg = palette.bg }),
		PmenuSel({ Pmenu, bg = palette.bright_blue, gui = "bold" }),
		PmenuSbar({ bg = palette.bright_yellow }),
		PmenuThumb({ bg = palette.yellow }),

		DiagnosticWarn({ fg = commons.diagnostic.warn, guisp = commons.diagnostic.warn }),
		DiagnosticSignWarn({ SignColumn, fg = commons.diagnostic.warn }),
		DiagnosticUnderlineWarn({
			DiagnosticWarn,
			bg = palette.black,
			gui = "undercurl",
			guisp = commons.diagnostic.warn,
		}),
		Error({ fg = commons.diagnostic.error, guisp = commons.diagnostic.error }),
		DiagnosticError({ Error, guisp = palette.bright_red }),
		DiagnosticSignError({ SignColumn, fg = palette.bright_red }),
		DiagnosticUnderlineError({
			DiagnosticError,
			bg = palette.black,
			gui = "undercurl",
			guisp = commons.diagnostic.error,
		}),
		DiagnosticInfo({ fg = commons.diagnostic.info, guisp = palette.bright_blue }),
		DiagnosticSignInfo({ SignColumn, fg = palette.bright_blue }),
		DiagnosticUnderlineInfo({
			DiagnosticInfo,
			bg = palette.black,
			gui = "undercurl",
			guisp = commons.diagnostic.info,
		}),
		-- DiagnosticHint({ fg = palette.bright_purple, guisp = palette.bright_purple }),
		DiagnosticHint({ fg = commons.diagnostic.hint, guisp = palette.bright_purple }),
		DiagnosticSignHint({ SignColumn, fg = palette.bright_purple }),
		DiagnosticUnderlineHint({
			DiagnosticHint,
			bg = palette.black,
			gui = "undercurl",
			guisp = commons.diagnostic.hint,
		}),

		StatusLine({ VertSplit, fg = palette.bg }),
		StatusLineNC({ VertSplit }),
		StatusLineActive({ bg = palette.gray, fg = palette.bg }),
		StatusLineActiveFileInfo({ StatusLineActive, gui = "bold" }),
		StatusLineActiveFileInfoModified({ StatusLineActiveFileInfo, gui = "bold, underline" }),
		StatusLineInactive({ bg = palette.black, fg = palette.gray }),
		StatusLineInactiveFileInfo({ StatusLineInactive, gui = "bold" }),
		StatusLineInactiveFileInfoModified({
			StatusLineInactive,
			fg = palette.gray,
			gui = "bold, underline",
		}),
		StatusLineBranch({ bg = palette.bright_black, fg = palette.fg, gui = "bold" }),
		StatusLineLSPServer({ StatusLineBranch }),
		StatusLineLSPError({ DiagnosticError, gui = "inverse" }),
		StatusLineLSPWarn({ DiagnosticWarn, gui = "inverse" }),
		StatusLineLSPInfo({ DiagnosticInfo, gui = "inverse" }),
		StatusLineLSPHint({ DiagnosticHint, gui = "inverse" }),
		StatusLineDiffAdd({ StatusLine, bg = commons.diff.add }),
		StatusLineDiffChange({ StatusLine, bg = commons.diff.change }),
		StatusLineDiffDelete({ StatusLine, bg = commons.diff.delete }),
		StatusLinePolyfill({ VertSplit }),
		TabLine({ Normal, bg = palette.black }),
		TabLineFill({ TabLine, bg = palette.bg }),
		TabLineSel({ TabLine, bg = palette.bg, gui = "bold, italic" }),
		TabLinePages({ TabLineFill, fg = palette.gray }),
		TabLineLSPError({ DiagnosticError }),
		TabLineLSPWarn({ DiagnosticWarn }),
		TabLineLSPInfo({ DiagnosticInfo }),
		TabLineLSPHint({ DiagnosticHint }),

		Special({ fg = palette.cyan }),
		SpecialChar({ Special }),
		SpecialKey({ Special }),
		Type({ fg = palette.bright_cyan, gui = "bold" }),
		Constant({ fg = palette.bright_blue }),
		Function({ fg = palette.bright_purple, gui = "bold" }),
		Boolean({ fg = palette.bright_red }),
		Number({ fg = palette.bright_blue }),
		String({ fg = palette.bright_green }),
		Comment({ fg = palette.blue, gui = "italic" }),
		Operator({ Special }),
		Keyword({ fg = palette.yellow, gui = "bold" }),
		Conditional({ Keyword }),
		Repeat({ Keyword }),
		Include({ Keyword }),
		PreProc({ Operator }),

		-- Tree-sitter.
		TSNone({}),
		TSPunctSpecial({ Special }),
		TSVariable({ fg = palette.fg }),
		TSVariableBuiltin({ fg = palette.bright_blue, gui = "italic" }),
		TSAttribute({ TSVariable }),
		TSProperty({ TSVariable }),
		TSField({ TSVariable }),
		TSParameter({ TSVariable, gui = "italic" }),
		TSParameterReference({ TSParameter }),
		TSType({ Type }),
		TSTypeBuiltin({ TSType, gui = "bold, italic" }),
		TSConstant({ Constant }),
		TSConstBuiltin({ TSConstant, gui = "bold, italic" }),
		TSFunction({ Function }),
		TSFuncBuiltin({ TSFunction }),
		TSMethod({ TSFunction }),
		TSBoolean({ Boolean }),
		TSString({ String }),
		TSNumber({ Number }),
		TSLiteral({ TSString }),
		TSComment({ Comment }),
		TSOperator({ Operator }),
		TSKeyword({ Keyword }),
		TSKeywordFunction({ TSKeyword, gui = "bold, italic" }),
		TSKeywordOperator({ TSVariable }),
		TSConditional({ Conditional }),
		TSRepeat({ Repeat }),
		TSNamespace({ TSOperator }),
		TSInclude({ Include }),

		DiffText({ Normal }),
		DiffAdd({ SignColumn, fg = commons.diff.add }),
		DiffChange({ SignColumn, fg = commons.diff.change }),
		DiffDelete({ SignColumn, fg = commons.diff.delete }),
		diffAdded({ DiffAdd }),
		diffChanged({ DiffChange }),
		diffRemoved({ DiffDelete }),
		diffFile({ Directory }),
		diffNewFile({ Directory }),
		diffLine({ Constant }),
	}
end)
